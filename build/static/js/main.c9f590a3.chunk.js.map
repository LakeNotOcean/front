{"version":3,"sources":["styles/addDataElement.module.css","styles/mainPage.module.css","styles/frontClass.module.css","common/Formattable.tsx","common/enumTypes.ts","common/commonClasses.ts","addData.tsx","mainPage.tsx","CustomerInfo.tsx","CustomerList.tsx","CustomerSearch.tsx","logo.svg","PerCategoryRevenueInfo.tsx","Navbar.tsx","Footer.tsx","frontClass.tsx","index.tsx"],"names":["module","exports","HorizontalLi","styled","li","NotifyType","SendType","Formattable","obj","this","Object","entries","map","key","_","keys","values","val","Customer","_id","_firstName","_lastName","_birthDate","_location","str","Item","_name","_price","_categoryId","_storage","n","Category","Order","_orderId","_custId","_items","_orderDate","_deliveryDate","_delivery","_sum","AddData","props","_childElements","_exist","state","displayAdd","display","bind","checkData","updateExist","i","childProps","length","push","Set","React","createRef","dataBaseContr","notify","listOfNotifies","className","styles","addDataElement","title","addDataButton","onClick","dataFields","element","inputType","errorMessage","ref","subButton","setState","isAccept","current","notDisplayError","has","inputValue","displayError","output","Map","forEach","set","clearInput","sendData","data","console","log","typeOfData","customer","notifyPushCustomer","get","order","notifyPushOrder","model","notifyPushModel","notifyPushCategory","Component","InputData","isError","handleChange","e","currentTarget","value","inputFields","inputInfo","errorMes","placeholder","type","inputField","style","borderColor","onChange","MainPage","mainPage","info","greeting","links","to","link","CustomerInfoDiv","div","OrderDiv","CustomerInfo","format_li","orders","CustomerList","jsx","customers","format_thead","format_tbody","SearchDiv","SearchForm","form","SearchLabel","label","SearchInput","input","CustomerSearch","useState","firstName","setFirstName","lastName","setLastName","Array","foundCustomers","setFoundCustomers","onSubmit","preventDefault","filter","c","htmlFor","name","target","Div","PerCategoryRevenueInfo","categories","category","format_li_horizontal","Bar","nav","Logo","img","Links","ol","Button","NavbarClass","_dataCust","_dataCategory","isCustomSeach","isPerItemRev","updateCustomers","updateCategories","displayCustomSeach","displayPerItemRev","listOfCust","src","logo","FooterContainer","footer","Link","a","Footer","frontClass","_customerRef","_orderRef","_modelRef","_catRef","_navBarRef","_dataBaseContr","ReactDOM","render","StrictMode","exact","path","component","addData","addDataElements","idOfCustomers","idOfOrders","idOfModels","idOfCat","document","getElementById","TestDataBaseController","dataBase","_dataBase","cust","cat","notifies","sendId","sendListOfCustomers","_front","alice","bob","front","updateId","add","setFront"],"mappings":"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","file":"static/js/main.c9f590a3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"addDataElement\":\"addDataElement_addDataElement__12nZr\",\"addDataButton\":\"addDataElement_addDataButton__3U4_9\",\"subButton\":\"addDataElement_subButton__3Cbeq\",\"dataFields\":\"addDataElement_dataFields__3Vwlk\",\"inputFields\":\"addDataElement_inputFields__21qd5\",\"inputInfo\":\"addDataElement_inputInfo__48VPm\",\"errorMes\":\"addDataElement_errorMes__3F9ed\",\"inputField\":\"addDataElement_inputField__OzLqn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainPage\":\"mainPage_mainPage__En_GD\",\"info\":\"mainPage_info__FRpAc\",\"greeting\":\"mainPage_greeting__2s-BI\",\"links\":\"mainPage_links__nl4sw\",\"link\":\"mainPage_link__3_XeN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addData\":\"frontClass_addData__hulm4\",\"addDataElements\":\"frontClass_addDataElements__2WrJN\",\"link\":\"frontClass_link__3JhkH\"};","import styled from \"styled-components\";\n\n// TODO: add styling\nfunction __format_thead(obj: Object): JSX.Element {\n  return <tr>\n    {Object.keys(obj).map((key) => <td>{key}</td>)}\n  </tr>;\n}\n\nfunction __format_tbody(obj: Object): JSX.Element {\n  return <tr>\n    {Object.values(obj).map((val) => <td>{val}</td>)}\n  </tr>;\n}\n\nfunction __format_li(obj: Object): JSX.Element {\n  return <>\n    {Object.entries(obj).map((key, _) => <li>{`${key[0]}: ${key[1]}`}</li>)}\n  </>;\n}\n\n\n// is horizontal li really necessary?\nconst HorizontalLi = styled.li`\n  display: inline;\n`;\n\nfunction __format_li_horizontal(obj: Object): JSX.Element {\n  return <>\n    {Object.entries(obj).map((key, _) => <HorizontalLi>{`${key[0]}: ${key[1]}`}</HorizontalLi>)}\n  </>;\n}\n\nexport abstract class Formattable {\n  format_li(): JSX.Element {\n    return __format_li(this);\n  }\n  format_li_horizontal(): JSX.Element {\n    return __format_li_horizontal(this);\n  }\n  format_thead(): JSX.Element {\n    return __format_thead(this);\n  }\n  format_tbody(): JSX.Element {\n    return __format_tbody(this);\n  }\n}","export enum NotifyType {\r\n  idOfCustomers,\r\n  idOfOrders,\r\n  idOfModels,\r\n  idOfCat,\r\n  listOfCust,\r\n}\r\n\r\nexport enum SendType {\r\n  customer,\r\n  order,\r\n  model,\r\n  Category,\r\n}\r\n","import { Formattable } from \"./Formattable\";\n\nexport class Customer extends Formattable {\n  constructor(\n    private _id: number,\n    private _firstName: string = \"None\",\n    private _lastName: string = \"None\",\n    private _birthDate: string = \"01/01/1900\",\n    private _location: string = \"Karaganda\"\n  ) {\n    super();\n  }\n\n  get firstName(): string {\n    return this._firstName;\n  }\n  get lastName(): string {\n    return this._lastName;\n  }\n  get birthDate(): string {\n    return this._birthDate;\n  }\n  get location(): string {\n    return this._location;\n  }\n  get id(): number {\n    return this._id;\n  }\n\n  set firstName(str: string) {\n    this._firstName = str;\n  }\n  set lastName(str: string) {\n    this._lastName = str;\n  }\n  set birthDate(str: string) {\n    this._birthDate = str;\n  }\n  set location(str: string) {\n    this._location = str;\n  }\n}\n\nexport class Item extends Formattable {\n  constructor(\n    private _id: number,\n    private _name: string = \"None\",\n    private _price: number = 0,\n    private _categoryId: number,\n    private _storage: number\n  ) {\n    super();\n  }\n\n  get id(): number {\n    return this._id;\n  }\n  get name(): string {\n    return this._name;\n  }\n  get categoryId(): number {\n    return this._categoryId;\n  }\n  get price(): number {\n    return this._price;\n  }\n\n  set name(str: string) {\n    this._name = str;\n  }\n  set categoryId(n: number) {\n    this._categoryId = n;\n  }\n  set price(n: number) {\n    this._price = n;\n  }\n}\n\nexport class Category extends Formattable {\n  constructor(private _id: number, private _name: string = \"None\") {\n    super();\n  }\n  get id(): number {\n    return this._id;\n  }\n  get name(): string {\n    return this._name;\n  }\n  set name(str: string) {\n    this._name = str;\n  }\n}\n\nexport class Order extends Formattable {\n  private _sum: number;\n  constructor(\n    private _orderId: number,\n    private _custId: number,\n    private _items: number,\n    private _orderDate: string = \"None\",\n    private _deliveryDate: string = \"None\",\n    private _delivery: string = \"None\"\n  ) {\n    super();\n    this._sum = 0;\n  }\n  // pushItem(item: Item): void {\n  //   this._items.push(Object.assign({}, item));\n  //   this._sum += item.price;\n  // }\n  get sum(): number {\n    return this._sum;\n  }\n  get ordDate(): string {\n    return this._orderDate;\n  }\n  get delDate(): string {\n    return this._deliveryDate;\n  }\n  get del(): string {\n    return this._delivery;\n  }\n}\n","/* eslint-disable no-mixed-operators */\r\n\r\n\r\nimport React, {Component,  RefObject} from 'react';\r\nimport { Category, Customer, Item, Order } from './common/commonClasses';\r\nimport { IDataBaseController } from './common/commonInterfaces';\r\nimport { NotifyType, SendType } from './common/enumTypes';\r\nimport styles from './styles/addDataElement.module.css'\r\n\r\n// export interface InputPropsCallBack{\r\n//     title:string;\r\n//     inputType:string;\r\n//     errorMessage:string;\r\n//     inInputChange:(inputStr:string)=>void;\r\n// }\r\n\r\nexport interface InputProps{\r\n    title:string;\r\n    inputType:string;\r\n    errorMessage:string;\r\n}\r\n\r\nexport interface InputState {\r\n    isError:boolean;\r\n    inputValue:string; \r\n}\r\n\r\n\r\nexport interface AddDataProps {\r\n    childProps:Array<InputProps>;\r\n    title:string;   \r\n    dataBaseContr:IDataBaseController;\r\n    listOfNotifies:Array<NotifyType>;\r\n    typeOfData:SendType;\r\n}\r\n\r\nexport interface AddDataState{\r\n    displayAdd:boolean;\r\n}\r\n\r\nexport class AddData extends Component<AddDataProps,AddDataState>{\r\n\r\n    \r\n    private _childElements:Array<RefObject<InputData>>;\r\n    private _exist:Array<Set<number>>;\r\n\r\n    constructor(props:AddDataProps){\r\n        super(props)\r\n        this.state={displayAdd:false}\r\n        this.display=this.display.bind(this);\r\n        this.checkData=this.checkData.bind(this);\r\n        this.updateExist=this.updateExist.bind(this);\r\n        //this.handleChange=this.handleChange.bind(this);\r\n        this._childElements=[];\r\n        this._exist=[];\r\n        for (let i:number=0; i<this.props.childProps.length; ++i)\r\n        {\r\n            this._exist.push(new Set<number>());\r\n            this._childElements.push(React.createRef<InputData>());\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.props.dataBaseContr.notify(this.props.listOfNotifies);   \r\n    }\r\n    componentDidUpdate(){\r\n        this.props.dataBaseContr.notify(this.props.listOfNotifies);\r\n    }\r\n\r\n    render(){   \r\n        return(\r\n            <div className={styles.addDataElement}>\r\n            <h1>{this.props.title} </h1>\r\n            <button className={styles.addDataButton} onClick={this.display}>open fields</button>\r\n            {this.state.displayAdd?\r\n            <div className={styles.dataFields}>\r\n                {this.props.childProps.map((element:InputProps,i) => (      \r\n                <InputData title={element.title}\r\n                    inputType={element.inputType}\r\n                    errorMessage={element.errorMessage}\r\n                    //onInputChange={this.handleChange}\r\n                    ref={this._childElements[i]}\r\n                    key={element.title}\r\n                /> \r\n                ))}\r\n                <button className={`${styles.addDataButton} ${styles.subButton}`} onClick={this.checkData}>submmit</button>\r\n            </div>:\r\n            null}   \r\n            </div>\r\n        );\r\n    }\r\n    \r\n    display():void {\r\n        this.setState({displayAdd:!this.state.displayAdd});\r\n    }\r\n    checkData():void{\r\n        let isAccept:boolean=true;\r\n        for (let i:number=0; i<this._childElements.length; ++i)\r\n        {\r\n            this._childElements[i].current?.notDisplayError();\r\n            if (this._exist[i].has(+(this._childElements[i].current?.state.inputValue || \"\"))\r\n            || this._childElements[i].current?.state.inputValue===\"\")\r\n            {\r\n                isAccept=false;\r\n                this._childElements[i].current?.displayError();\r\n            }\r\n            else\r\n                this._childElements[i].current?.notDisplayError();\r\n        }\r\n        if (isAccept)\r\n        {\r\n            let output=new Map<string,string>();\r\n            this._childElements.forEach((element)=>{\r\n                output.set( element.current?.props.title || \"\",element.current?.state.inputValue || \"\");\r\n            })\r\n            this._childElements.forEach((element)=>{\r\n                element.current?.clearInput();\r\n            }); \r\n            this.sendData(output);\r\n\r\n        }\r\n\r\n    }\r\n    updateExist(i:number,data:Set<number>):void{\r\n        if (i>=this._exist.length)\r\n            return;\r\n        this._exist[i]=data;\r\n        console.log(`data of ${this.props.title} was updated`);\r\n    }\r\n    private sendData(data:Map<string,string>):void{\r\n        switch(this.props.typeOfData){\r\n            case SendType.customer:\r\n                this.props.dataBaseContr.notifyPushCustomer(new Customer(\r\n                    +(data.get(\"ID\") || 0),\r\n                    data.get(\"First Name\"), data.get(\"lastName\"), data.get(\"Date of Birth\"),data.get(\"Location\")\r\n                  ));\r\n                break;\r\n            case SendType.order:\r\n                this.props.dataBaseContr.notifyPushOrder(new Order(\r\n                    +(data.get(\"ID\") || 0),\r\n                    +(data.get(\"Customer\") || 0), +(data.get(\"Model\") || 0), data.get(\"Order Date\"),data.get(\"Delivery Date\"),\r\n                  ));\r\n                  break;\r\n            case SendType.model:\r\n                this.props.dataBaseContr.notifyPushModel(new Item(+(data.get(\"ID\") || 0),\r\n                data.get(\"Name\"),+(data.get(\"Price\") || 0),+(data.get(\"Category\") || 0),\r\n                +(data.get(\"Storage\") || 0)\r\n                ));\r\n                break;\r\n            case SendType.Category:\r\n                this.props.dataBaseContr.notifyPushCategory(new Category(+(data.get(\"ID\") || 0),\r\n                data.get(\"Name\")\r\n                ));\r\n                break;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n \r\nexport class InputData extends Component<InputProps,InputState>{\r\n\r\n    \r\n    constructor(props:InputProps,state:InputState){\r\n        super(props)\r\n        this.state=state;\r\n        this.state={isError:false,inputValue:\"\"};\r\n        this.handleChange=this.handleChange.bind(this);\r\n        this.displayError=this.displayError.bind(this);\r\n        this.notDisplayError=this.notDisplayError.bind(this);\r\n        this.clearInput=this.clearInput.bind(this);\r\n    }\r\n\r\n    handleChange(e:React.FormEvent<HTMLInputElement>):void{\r\n        this.setState({inputValue:e.currentTarget.value})\r\n        //this.props.onInputChange(e.currentTarget.value);\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.handleChange=this.handleChange.bind(this);\r\n        this.displayError=this.displayError.bind(this);\r\n        this.notDisplayError=this.notDisplayError.bind(this);\r\n        this.clearInput=this.clearInput.bind(this);\r\n        console.log(\"component was mounted\");\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className={styles.inputFields}>\r\n            <div className={styles.inputInfo}>\r\n                <h2>{this.props.title}</h2>\r\n                {this.state.isError?<h2 className={styles.errorMes}>{this.props.errorMessage}</h2>:null}\r\n            </div>\r\n            <input  placeholder={\"get \"+this.props.title} type={this.props.inputType} value={this.state.inputValue}\r\n                className={`${styles.inputField}`} style={{borderColor:this.state.isError?'red':'black'}}\r\n                onChange={this.handleChange}/>\r\n            </div>)\r\n    }\r\n    displayError():void{\r\n       this.setState({isError:true}); \r\n    }\r\n    notDisplayError():void{\r\n        this.setState({isError:false});\r\n    }\r\n    clearInput():void{\r\n        this.setState({inputValue:\"\"});\r\n    }\r\n\r\n}\r\n\r\n","import React, {Component} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport styles from './styles/mainPage.module.css'\r\n\r\n\r\n\r\nexport class MainPage extends Component{\r\n    render(){\r\n    return(\r\n        <section className={styles.mainPage}>\r\n            <section className={styles.info}>\r\n                <h3 className={`${styles.greeting}`}>Welcome to the slave store database</h3>\r\n                <small>What do you want to do?</small>\r\n                <div className={styles.links}>\r\n                <Link to=\"/inputData\" className={styles.link}>Add some data</Link>\r\n                <Link to=\"/outputData\" className={styles.link}>Find some data</Link>\r\n                </div>\r\n            </section>\r\n        </section>)\r\n    }\r\n}\r\n","import styled from 'styled-components'\nimport { Customer, Order } from './common/commonClasses'\n\n\nconst CustomerInfoDiv = styled.div`\n    display: block;\n\twidth: 300px;\n\tmargin: 50px auto;\n    padding: 10px;\n    border: 3px solid black;\n`;\n\nconst OrderDiv = styled.div`\n    margin: 10px;\n`;\n\nexport default function CustomerInfo(\n    props: { customer: Customer, orders: Array<Order> } // TODO: make parameters sane\n): JSX.Element {\n    return <CustomerInfoDiv>\n        Customer:\n        <ul>\n            {props.customer.format_li()}\n        </ul>\n        Orders:\n        <ul>\n            {props.orders.map(\n                (order) => <OrderDiv>{order.format_li()}</OrderDiv>\n            )}\n        </ul>\n    </CustomerInfoDiv>;\n}","import styled from 'styled-components'\nimport { Customer } from './common/commonClasses'\n\nexport default function CustomerList(props: {\n    customers: Array<Customer>\n}): JSX.Element {\n    let jsx = <></>;\n    if (props.customers.length > 0) {\n        jsx = props.customers[0].format_thead()\n    }\n    return <table>\n        <thead>\n            {jsx}\n        </thead>\n        <tbody>{\n            props.customers.map(\n                (customer) => customer.format_tbody()\n            )\n        }</tbody>\n    </table>;\n}","import { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { Customer, Order } from \"./common/commonClasses\";\nimport CustomerInfo from \"./CustomerInfo\";\nimport CustomerList from \"./CustomerList\";\n\nconst SearchDiv = styled.div`\n    display: block;\n\twidth: 350px;\n\tmargin: 50px auto;\n    padding: 10px;\n    border: 3px solid black;\n`;\n\nconst SearchForm = styled.form`\n\n`;\n\nconst SearchLabel = styled.label`\n    display: block;\n`;\n\nconst SearchInput = styled.input`\n    display: block;\n`;\n\nexport default function CustomerSearch(props: {\n    customers: Array<Customer> // TODO: change to something sane later?\n}): JSX.Element {\n    const [firstName, setFirstName] = useState('');\n    const [lastName, setLastName] = useState('');\n    const [foundCustomers, setFoundCustomers] = useState(new Array<Customer>());\n    let jsx = <></>;\n    if (foundCustomers.length === 0) {\n        jsx = <>No customers matching full name found.</>;\n    }\n    else if (foundCustomers.length === 1) {\n        jsx = <CustomerInfo customer={foundCustomers[0]} orders={new Array<Order>()} />;\n    }\n    else {\n        jsx = <CustomerList customers={foundCustomers}/>;\n    }\n    return <SearchDiv>\n        <SearchForm onSubmit={\n            (e) => {\n                e.preventDefault();\n                setFoundCustomers(\n                    props.customers.filter(c => c.firstName === firstName && c.lastName === lastName)\n                );\n            }\n        }>\n            <SearchLabel htmlFor=\"firstName\">Имя:</SearchLabel>\n            <SearchInput type=\"text\" name=\"firstName\" onChange={(e) => setFirstName(e.target.value)}/>\n            <SearchLabel htmlFor=\"lastName\">Фамилия:</SearchLabel>\n            <SearchInput type=\"text\" name=\"lastName\" onChange={(e) => setLastName(e.target.value)}/>\n            <input type=\"submit\" value=\"Искать\" />\n        </SearchForm>\n        <div>{jsx}</div>\n    </SearchDiv>;\n}","export default __webpack_public_path__ + \"static/media/logo.62fff921.svg\";","import styled from \"styled-components\";\nimport { Category, Item } from \"./common/commonClasses\";\n\nconst Div = styled.div`\n    margin: 20px;\n`;\n\nexport default function PerCategoryRevenueInfo(props: {categories: Array<Category>}) {\n    return <Div>{props.categories.map(category => <Div>{category.format_li_horizontal()}</Div>)}</Div>;\n}","import { Component } from 'react';\nimport styled from 'styled-components'\nimport { Category, Customer } from './common/commonClasses';\nimport { IDataBaseController } from './common/commonInterfaces';\nimport { NotifyType } from './common/enumTypes';\nimport CustomerSearch from './CustomerSearch';\nimport logo from './logo.svg'\nimport PerItemRevenueInfo from './PerCategoryRevenueInfo';\n\n\nconst Bar = styled.nav`\n    position: sticky;\n    top: 0px;\n    width: 100%;\n\n    display: flex;\n    justify-content: space-evenly;\n    align-items: center;\n\n    background-color: grey;\n`;\n\nconst Logo = styled.img`\n    width: 50px;\n    height: 50px;\n    background-color: lightgrey;\n    border: solid black 3px;\n    border-radius: 10px;\n`;\n\nconst Links = styled.ol`\n    padding-top: 2px;\n    padding-bottom: 2px;\n    list-style-type: none;\n`;\n\nconst Button = styled.li`\n    font-size: 2em;\n    color: white;\n\n    display: inline-block;\n\n    border: solid 1px;\n    padding-left: 2px;\n    padding-right: 2px;\n`;\n\n// export default function Navbar(props: {\n//     setView: (arg0: JSX.Element) => void;\n// }): JSX.Element {\n//     const alice = new Customer(\n//         123, \"Alice\", \"Alice\", \"27.18.2818\", \"Nowhere\"\n//     );\n//     const bob = new Customer(\n//         321, \"Bob\", \"Bob\", \"27.18.2818\", \"Nowhere\"\n//     );\n//     const customers = [alice, alice, bob];\n//     const item = new Item(1,\"wand\", -3.14, -3.14);\n//     const items = [item, item, item];\n//     const category = new Category(1, \"tudums\");\n//     const categories = [category, category];\n//     return <Bar>\n//         <Logo src={logo}/>\n//         <Links>\n//             <Button>Каталог</Button>\n//             <Button>Корзина</Button>\n//             <Button onClick={_ => props.setView(<CustomerSearch customers={customers}/>)}>Поиск клиента по имени</Button>\n//             <Button onClick={_ => props.setView(<PerItemRevenueInfo categories={categories}/>)}>Прибыль по товарам</Button>\n//         </Links>\n//         <Links>\n//             <Button>Вход</Button>\n//             <Button>Регистрация</Button>\n//         </Links>\n//     </Bar>\n// }\n\nexport interface NavBarProps{\n    dataBaseContr:IDataBaseController;\n}\n\ninterface NavBarState{\n    isCustomSeach:boolean;\n    isPerItemRev:boolean;\n}\n\n\nexport class NavbarClass extends Component<NavBarProps,NavBarState>{\n\n    private _dataCust:Array<Customer>;\n    private _dataCategory:Array<Category>;\n\n    constructor(props:NavBarProps){\n        super(props)\n        this.state={isCustomSeach:false,isPerItemRev:false}\n        this._dataCust=new Array<Customer>();\n        this._dataCategory=new Array<Category>();\n        this.updateCustomers=this.updateCustomers.bind(this);\n        this.updateCategories=this.updateCategories.bind(this);\n        this.displayCustomSeach=this.displayCustomSeach.bind(this);\n        this.displayPerItemRev=this.displayPerItemRev.bind(this);\n    }\n\n    componentDidMount(){\n        console.log(\"component is mounted\");\n        this.props.dataBaseContr.notify([NotifyType.listOfCust]);\n    }\n    componentDidUpdate(){\n        console.log(\"component is mounted\");\n        this.props.dataBaseContr.notify([NotifyType.listOfCust]);\n    }\n\n    updateCustomers(data:Array<Customer>):number{\n        console.log(\"updateCustomers in NavBAr is called\");\n        this._dataCust=data;\n        return 0;\n    }\n\n    updateCategories(data:Array<Category>):void{\n        this._dataCategory=data;\n    }\n    render(){\n        return(<Bar>\n        <Logo src={logo}/>\n        <Links>\n            <Button>Каталог</Button>\n            <Button>Корзина</Button>\n            <Button onClick={this.displayCustomSeach}>Поиск клиента по имени</Button>\n            <Button onClick={this.displayPerItemRev}>Прибыль по товарам</Button>\n            {this.state.isCustomSeach?<CustomerSearch customers={this._dataCust}/>:null}\n            {this.state.isPerItemRev?<PerItemRevenueInfo categories={this._dataCategory}/>:null}\n        </Links>\n        <Links>\n            <Button>Вход</Button>\n            <Button>Регистрация</Button>\n        </Links>\n    </Bar>)\n    }\n    displayCustomSeach():void{\n        this.setState({isCustomSeach:!this.state.isCustomSeach});\n    }\n    displayPerItemRev():void{\n        this.setState({isPerItemRev:!this.state.isPerItemRev});\n    }\n\n}","import styled from 'styled-components'\n\nconst FooterContainer = styled.footer`\n    position: absolute;\n    left: 0;\n    bottom: 0;\n    width: 100%;\n\n    background-color: lightgrey;\n`;\n\nconst Link = styled.a`\n    padding: 20px;\n`;\n\n\nexport default function Footer(): JSX.Element {\n    return <FooterContainer>\n        <Link>Terms of service</Link>\n        <Link>Privacy Policy</Link>\n    </FooterContainer>;\n}","import React from 'react';\r\nimport { RefObject } from 'react';\r\nimport { createRef } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {AddData} from './addData';\r\nimport { MainPage } from './mainPage';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Link,\r\n} from \"react-router-dom\";\r\nimport { NavbarClass } from './Navbar';\r\nimport Footer from './Footer';\r\nimport { Category, Customer} from './common/commonClasses';\r\nimport { IDataBaseController, IView } from './common/commonInterfaces';\r\nimport { NotifyType, SendType } from './common/enumTypes';\r\nimport styles from './styles/frontClass.module.css';\r\n\r\n\r\nexport class frontClass implements IView  {\r\n\r\n    private _customerRef:RefObject<AddData>;\r\n    private _orderRef:RefObject<AddData>;\r\n    private _modelRef:RefObject<AddData>;\r\n    private _catRef:RefObject<AddData>;\r\n    private _navBarRef:RefObject<NavbarClass>;\r\n    private _dataBaseContr:IDataBaseController;\r\n\r\n    constructor(dataBaseContr:IDataBaseController)\r\n    {\r\n        this._dataBaseContr=dataBaseContr;\r\n        this._customerRef=createRef<AddData>();\r\n        this._orderRef=createRef<AddData>();\r\n        this._navBarRef=createRef<NavbarClass>();\r\n        this._modelRef=createRef<AddData>();\r\n        this._catRef=createRef<AddData>();\r\n    }\r\n    render():void{  \r\n      ReactDOM.render(\r\n        <React.StrictMode>\r\n          <Router>\r\n            <Route exact path=\"/\" component={MainPage}/>\r\n            <Route exact path=\"/inputData\" render={()=> (\r\n            <div className={styles.addData}>\r\n              <div className={styles.addDataElements}>\r\n              <AddData title={\"Add Customer\"} childProps={[{title:\"ID\",inputType:\"number\",errorMessage:\"id exists/empty\"},\r\n                {title:\"First Name\",inputType:\"string\", errorMessage:\"empty field\"},\r\n                {title:\"Last Name\",inputType:\"string\", errorMessage:\"empty field\"},\r\n                {title:\"Date of Birth\",inputType:\"date\", errorMessage:\"empty field\"},\r\n                {title:\"Location\",inputType:\"string\", errorMessage:\"empty field\"}]\r\n              }  \r\n              dataBaseContr={this._dataBaseContr} listOfNotifies={[NotifyType.idOfCustomers]} typeOfData={SendType.customer}\r\n              ref={this._customerRef}\r\n              />\r\n            <AddData title={\"Add Order\"} childProps={[{title:\"ID\",inputType:\"number\",errorMessage:\"id exists/empty\"},\r\n                {title:\"Customer\",inputType:\"number\",errorMessage:\"id exists/empty\"},\r\n                {title:\"Model\",inputType:\"number\",errorMessage:\"id exists/empty\"},\r\n                {title:\"Order Date\",inputType:\"date\",errorMessage:\"empty field\"},\r\n                {title:\"Delivery Date\",inputType:\"date\",errorMessage:\"empty field\"},\r\n                {title:\"Delivery\",inputType:\"string\",errorMessage:\"empty field\"}]\r\n                }\r\n                dataBaseContr={this._dataBaseContr} typeOfData={SendType.order}\r\n                listOfNotifies={[NotifyType.idOfOrders, NotifyType.idOfModels, NotifyType.idOfCustomers]}\r\n                ref={this._orderRef}\r\n                />\r\n              <AddData title={\"Add Model\"} childProps={[{title:\"ID\",inputType:\"number\",errorMessage:\"id exists/empty\"},\r\n                {title:\"Name\",inputType:\"string\",errorMessage:\"empty field\"},\r\n                {title:\"Price\",inputType:\"number\",errorMessage:\"empty field\"},\r\n                {title:\"Category\",inputType:\"number\",errorMessage:\"id exists/empty\"},\r\n                {title:\"storage\",inputType:\"number\",errorMessage:\"empty field\"}]\r\n                }\r\n                dataBaseContr={this._dataBaseContr} typeOfData={SendType.model}\r\n                listOfNotifies={[NotifyType.idOfModels,NotifyType.idOfCat]}\r\n                ref={this._modelRef}\r\n              /> \r\n              <AddData title={\"Add Category\"} childProps={[{title:\"ID\",inputType:\"number\",errorMessage:\"id exists/empty\"},\r\n                {title:\"Name\",inputType:\"string\",errorMessage:\"empty field\"}]\r\n                }\r\n                dataBaseContr={this._dataBaseContr} typeOfData={SendType.Category}\r\n                listOfNotifies={[NotifyType.idOfCat]}\r\n                ref={this._catRef}\r\n              />  \r\n              </div>\r\n              <Link to=\"/\" className={styles.link}>return to main page</Link>\r\n              </div>\r\n            )}/>\r\n            <Route exact path=\"/outputData\" render={()=>(\r\n              <div>\r\n                <NavbarClass ref={this._navBarRef} dataBaseContr={this._dataBaseContr}/>\r\n                <Footer />\r\n                <Link to=\"/\">return to main page</Link>\r\n              </div>\r\n            )}/>\r\n         </Router>\r\n        </React.StrictMode>,\r\n        document.getElementById('root')\r\n      );\r\n    }\r\n    updateId(data:Set<number>, type:NotifyType):void{\r\n      switch(type){\r\n        case NotifyType.idOfCustomers:\r\n          this._customerRef.current?.updateExist(0,data);\r\n          this._orderRef.current?.updateExist(1,data);\r\n          break;\r\n        case NotifyType.idOfOrders:\r\n          this._orderRef.current?.updateExist(0,data);\r\n          break;\r\n        case NotifyType.idOfModels:\r\n          this._orderRef.current?.updateExist(2,data);\r\n          this._modelRef.current?.updateExist(0,data);\r\n          break;\r\n        case NotifyType.idOfCat:\r\n          this._modelRef.current?.updateExist(3,data);\r\n          this._catRef.current?.updateExist(0,data);\r\n          break;\r\n      }\r\n    }\r\n    // updateIdOfCustomers(data:Set<number>):void{\r\n    //     this._customerRef.current?.updateExist(0,data);\r\n    //     this._orderRef.current?.updateExist(1,data);\r\n    //     console.log(\"updateIdOfCustomers was called\");\r\n    // }\r\n    // updateIdOfOrders(data:Set<number>):void{\r\n    //     this._orderRef.current?.updateExist(0,data);\r\n    //     console.log(\"updateIdOfOrders was called\");\r\n    // }\r\n\r\n    // updateIdOfModels(data: Set<number>): void{\r\n    //   this._orderRef.current?.updateExist(2,data);\r\n    //   this._modelRef.current?.updateExist(0,data);\r\n    //   console.log(\"updateIdOfModels was called\");\r\n    // }\r\n    // updateIdOfCategories(data:Set<number>):void{\r\n    //   this._modelRef.current?.updateExist(3,data);\r\n    //   this._catRef.current?.updateExist(0,data);\r\n    // }\r\n\r\n    updateCustomers(data:Array<Customer>):void{\r\n      console.log(\"updateCustomers in frontClass is called\",data.length);\r\n      this._navBarRef.current?.updateCustomers(data);\r\n    }\r\n    \r\n    updateCategories(data:Array<Category>):void{\r\n      this._navBarRef.current?.updateCategories(data);\r\n    }\r\n    \r\n  }\r\n\r\n","\nimport { Category, Customer, Order,Item } from './common/commonClasses';\nimport { IDataBaseController, IView, } from './common/commonInterfaces';\nimport { NotifyType } from './common/enumTypes';\nimport {frontClass} from './frontClass';\n\n\n\nclass TestDataBaseController implements IDataBaseController{\n\n    private _dataBase:TestDataBase;\n    constructor(dataBase:TestDataBase){\n        this._dataBase=dataBase;\n    }\n    notifyPushCustomer(cust: Customer): void{\n        console.log(\"customer was pushed\");\n    }\n    notifyPushOrder(order: Order): void{\n        console.log(\"order was pushed\");\n    }\n    notifyPushModel(model:Item):void{\n        console.log(\"model was pushed\");\n    }\n    notifyPushCategory(cat:Category):void{\n        console.log(\"category was pushed\");\n    }\n    notify(notifies:Array<NotifyType>): void{\n        for (let i=0; i<notifies.length; ++i)\n            switch(notifies[i]){\n                case NotifyType.idOfCustomers:\n                    this._dataBase.sendId(NotifyType.idOfCustomers);\n                    console.log(\"get id of customers was notify\");\n                    break;\n                case NotifyType.idOfModels:\n                    this._dataBase.sendId(NotifyType.idOfModels);\n                    console.log(\"get id of model was notify\");\n                    break;\n                case NotifyType.idOfOrders:\n                    this._dataBase.sendId(NotifyType.idOfOrders);\n                    console.log(\"get id of orders was notify\");\n                    break;\n                case NotifyType.listOfCust:\n                    this._dataBase.sendListOfCustomers();\n                    console.log(\"get list of customers was notify\");\n                    break;\n                case NotifyType.idOfCat:\n                    this._dataBase.sendId(NotifyType.idOfCat);\n                    console.log(\"get id of categories was notify\");\n                    break;\n            }\n    }\n}\n\nclass TestViewController implements IView{\n\n    private _view:frontClass;\n    constructor(view:frontClass){\n        this._view=view;\n    }\n    updateId(data:Set<number>,type:NotifyType){\n        this._view.updateId(data,type);\n    }\n    updateCustomers(data: Customer[]): void {\n        this._view.updateCustomers(data);\n    }\n    updateCategories(data: Category[]): void {\n        this._view.updateCategories(data);\n    }\n    \n}\n\nclass TestDataBase{\n    private _front?:frontClass;\n    public alice = new Customer(\n        123, \"Alice\", \"Alice\", \"27.18.2818\", \"Nowhere\"\n    );\n    public bob = new Customer(\n        321, \"Bob\", \"Bob\", \"27.18.2818\", \"Nowhere\"\n    );  \n    setFront(front:frontClass):void{\n        this._front=front;\n    }\n    sendListOfCustomers():void{\n        this._front?.updateCustomers([this.alice,this.bob]);\n    }\n    sendId(type:NotifyType):void{\n        this._front?.updateId(new Set<number>().add(1234),type);\n    }\n\n}\n\nlet dataBase=new TestDataBase();\nlet dataBaseContr=new TestDataBaseController(dataBase);\nlet front=new frontClass(dataBaseContr);\ndataBase.setFront(front);\n\nfront.render();\n\n"],"sourceRoot":""}